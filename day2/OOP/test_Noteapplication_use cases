import unittest
import Note-it
#from Note-it import NotesApplication

 1.  """test if constructor creates the correct object ("a string")
        """
        testcase = NotesApplication("")
        self.assertIsInstance(testcase, NotesApplication,
                              msg="initialisation not successful")

 2. """Establish what happpens when you pass an int to the constructor
        instead of a string
        """
        testcase = NotesApplication(2)
        self.assertIsNone(testcase.author,
                          msg="init with int shouldn't set author variable")

 *3. """Establish what happpens when you pass a dict to the constructor
        instead of a string
        """
        testcase = NotesApplication({})
        self.assertIsNone(testcase.author,
                          msg="init with dict shouldn't set author variable")

 5. """test if the author instance variable is properly set
        """
        testcase = NotesApplication("G.I. JOE")
        self.assertEqual(testcase.author, "G.I. JOE",
                         msg="author attribute is incorrect")

 6. """test if the notes list is properly created
        """
        testcase = NotesApplication("")
        self.assertListEqual(testcase.notes, [],
                             msg="notes attribute is incorrect")

 7. """test whether adding a note works
        """
        testcase = NotesApplication("G.I. JOE")
        testcase.create("Another Note")

        self.assertEqual(len(testcase.notes), 1,
                         msg="notes not added correctly")

 8. ""test if the notes list has the correct value
        """
        testcase = NotesApplication("G.I. JOE")
        testcase.create("Another Note")

        self.assertListEqual(testcase.notes, ["Another Note"],
                             msg="incorrect notes attribute after create")

 9. """test if an int can be added as a note
        """
        testcase = NotesApplication("G.I. JOE")
        testcase.create(1)

        self.assertListEqual(testcase.notes, [1],
                             msg="incorrect notes attribute after create")

 10."""test if a list can be used to create a note
        """
        testcase = NotesApplication("G.I. JOE")
        testcase.create([1, 2])

        self.assertListEqual(testcase.notes, [[1, 2]],
                             msg="incorrect notes attribute after create")

 11."""Test print outs of the lists
        """
        testcase = NotesApplication("G.I. JOE")
        testcase.create("Another Note")

        testcase.list()

 12."""test normal get behaviour
        """
        testcase = NotesApplication("G.I. JOE")
        testcase.create("Another Note")

        self.assertEqual(testcase.get(0), "Another Note",
                         msg="Incorrect get method")

 13."""test get with bad parameters
        """
        testcase = NotesApplication("G.I. JOE")
        testcase.create("Another Note")

        self.assertEqual(testcase.get(10), None,
                         msg="Invalid index should return None")

 *14."""test get with bad parameters
        """
        testcase = NotesApplication("G.I. JOE")
        testcase.create("Another Note")

        self.assertEqual(testcase.get(""), None,
                         msg="string index should return None")

 15."""Test if search prints the right output"""
        testcase = NotesApplication("G.I. JOE")
        testcase.create("Another Note")

        testcase.search("My Second")

 16."""test if list is editable
        """
        testcase = NotesApplication("G.I. JOE")
        testcase.create("Another Note")

        self.assertTrue(testcase.edit(0, "New Another Note"),
                        msg="edit was unsuccessful")

 17."""test if edit changes the right variable to the right
        value
        """
        testcase = NotesApplication("G.I. JOE")
        testcase.create("Another Note")
        testcase.edit(0, "New Another Note")

        self.assertEqual(testcase.notes[0], "New Another Note",
                         msg="edit value incorrect")

18. """test if edit changes the right variable to the right
        value
        """
        testcase = NotesApplication("G.I. JOE")
        testcase.create("Another Note")
        testcase.edit(0, 2)

        self.assertEqual(testcase.notes[0], 2,
                         msg="edit value incorrect")

 19."""test if edit recongnizes bad indexes
        """
        testcase = NotesApplication("G.I. JOE")
        testcase.create("Another Note")

        self.assertFalse(testcase.edit(10, "New Another Note"),
                         msg="edit was unsuccessful")

 20 """test if edit changes the right variable to the right
        value
        """
        testcase = NotesApplication("G.I. JOE")
        testcase.create("Another Note")
        testcase.edit(0, [1, 2])

        self.assertEqual(testcase.notes[0], [1, 2],
                         msg="edit value incorrect")

 21."""test if edit changes the right variable to the right
        value
        """
        testcase = NotesApplication("G.I. JOE")
        testcase.create("Another Note")
        testcase.edit(0, (1, 2))

        self.assertEqual(testcase.notes[0], (1, 2),
                         msg="edit value incorrect")


if __name__ == '__main__':
    unittest.main()